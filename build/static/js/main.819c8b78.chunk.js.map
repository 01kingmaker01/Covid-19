{"version":3,"sources":["components/Cards/Cards.module.css","components/CountryPicker/CountryPicker.module.css","components/Chart/Chart.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","image.png"],"names":["module","exports","Cards","date","data","last_update","total_cases","total_deaths","total_recovered","className","styles","container","Grid","spacing","justify","elevation","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","blue","gutterBottom","variant","start","end","duration","separator","color","Date","toDateString","recovered","green","deaths","red","url","fetchData","country","a","axios","get","modifiedData","map","cases","console","log","countriesName","name","alpha2","error","Chart","useState","dailyData","setDailyData","useEffect","fetchAPI","deathPer","Math","round","dailyDataUpdated","filter","e","match","lastUpdate","unshift","push","length","lineChart","labels","datasets","label","borderColor","backgroundColor","fill","barChart","options","legend","display","title","chartWrapper","chartAreaWrapper","href","CountryPicker","handleCountry","handleDate","dateSelected","fetchedCountries","setFetchedCountries","setDate","fetchCountries","fetchedData","countries","i","option","key","value","dates","dateIN","dateArr","split","modifiedDate","FormControl","formControl","NativeSelect","select","onChange","target","App","state","cardData","isLoading","countrySelected","alert","setState","dateData","this","loading","confirmBtnStyle","padding","fontSize","onConfirm","style","window","innerwidth","src","covid","image","alt","graphContainer","Component","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.819c8b78.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2wl1e\",\"card\":\"Cards_card__3eoOH\",\"green\":\"Cards_green__IvuDd\",\"blue\":\"Cards_blue__3uDfT\",\"red\":\"Cards_red__1B92w\",\"infected\":\"Cards_infected__3yb9h\",\"recovered\":\"Cards_recovered__1Vz6V\",\"deaths\":\"Cards_deaths__30sEJ\",\"Chart\":\"Cards_Chart__bhokR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__sAESq\",\"select\":\"CountryPicker_select__2-Bbb\",\"option\":\"CountryPicker_option__2yHN2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__3M9Lv\",\"card\":\"Chart_card__F4n6b\",\"chartWrapper\":\"Chart_chartWrapper__OjD88\",\"blue\":\"Chart_blue__Va-Hl\",\"red\":\"Chart_red__1AxQB\",\"chartAreaWrapper\":\"Chart_chartAreaWrapper__3RFWD\"};","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n\r\nconst Cards = ({\r\n  date,\r\n  data: { last_update, total_cases, total_deaths, total_recovered },\r\n}) => {\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={4} justify='center'>\r\n        <Grid\r\n          elevation={5}\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.infected)}\r\n        >\r\n          <CardContent>\r\n            <Typography className={styles.blue} gutterBottom>\r\n              Infected\r\n            </Typography>\r\n            <Typography variant='h5'>\r\n              <CountUp\r\n                start={0}\r\n                end={total_cases}\r\n                duration={2.5}\r\n                separator=','\r\n              />\r\n            </Typography>\r\n            <Typography color='textSecondary'>\r\n              {new Date(last_update).toDateString()}\r\n            </Typography>\r\n            <Typography variant='body2'>\r\n              Number of Active Cases of COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n\r\n        <Grid\r\n          elevation={5}\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.recovered)}\r\n        >\r\n          <CardContent>\r\n            <Typography className={styles.green} gutterBottom>\r\n              Recovered\r\n            </Typography>\r\n            <Typography variant='h5'>\r\n              <CountUp\r\n                start={0}\r\n                end={total_recovered}\r\n                duration={2.5}\r\n                separator=','\r\n              />\r\n            </Typography>\r\n            <Typography color='textSecondary'>\r\n              {new Date(last_update).toDateString()}\r\n            </Typography>\r\n            <Typography variant='body2'>\r\n              Number of Recoveries from COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n\r\n        <Grid\r\n          elevation={5}\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.deaths)}\r\n        >\r\n          <CardContent>\r\n            <Typography className={styles.red} gutterBottom>\r\n              Deaths\r\n            </Typography>\r\n            <Typography variant='h5'>\r\n              <CountUp\r\n                start={0}\r\n                end={total_deaths}\r\n                duration={2.5}\r\n                separator=','\r\n              />\r\n            </Typography>\r\n            <Typography color='textSecondary'>\r\n              {new Date(last_update).toDateString()}\r\n            </Typography>\r\n            <Typography variant='body2'>\r\n              Number of Deaths caused by COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import axios from 'axios';\r\n\r\n// const url = 'https://covid19-api.org/api/status#';\r\nconst url = 'https://covid19-api.org/api';\r\n\r\nexport const fetchData = async (country) => {\r\n  try {\r\n    if (country && country !== 'Globe') {\r\n      const { data } = await axios.get(`${url}/timeline/${country}`);\r\n      const modifiedData = data.map(\r\n        ({ last_update, cases, deaths, recovered }) => ({\r\n          total_cases: cases,\r\n          total_deaths: deaths,\r\n          total_recovered: recovered,\r\n          last_update,\r\n        })\r\n      );\r\n      // console.log(modifiedData);\r\n      return modifiedData;\r\n    } else {\r\n      const { data } = await axios.get(`${url}/timeline/`);\r\n      // console.log(data);\r\n      return data;\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const countriesName = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/countries`);\r\n    return data.map(({ name, alpha2 }) => ({ name, alpha2 }));\r\n    // return{name,alpha2}\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n\r\nexport const fetchDate = async (date) => {\r\n  try {\r\n    if (date && date !== '') {\r\n      let modifiedDate = (dateIN) => {\r\n        let month = new Date(dateIN).getMonth(),\r\n          year = new Date(dateIN).getFullYear(),\r\n          digit = new Date(dateIN).getDate();\r\n\r\n        month = (month < 9 ? '0' : '') + (month + 1);\r\n        digit = (digit < 10 ? '0' : '') + digit;\r\n\r\n        return `${year}-${month}-${digit}`;\r\n      };\r\n\r\n      let updatedDate = modifiedDate(date);\r\n\r\n      const { data } = await axios.get(`${url}/timeline/${updatedDate}`);\r\n      const modifiedData = data.map(\r\n        ({ last_update, cases, deaths, recovered }) => ({\r\n          total_cases: cases,\r\n          total_deaths: deaths,\r\n          total_recovered: recovered,\r\n          last_update,\r\n        })\r\n      );\r\n      // console.log(modifiedData);\r\n      return modifiedData;\r\n    } else {\r\n      const { data } = await axios.get(`${url}/timeline/`);\r\n      // console.log(data);\r\n      return data;\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\n// let toUpper = (str) => {\r\n//   return str\r\n\r\n//     .split(' ')\r\n//     .map((word) => {\r\n//       if (word[0] !== undefined) {\r\n//         return word[0].toUpperCase() + word.substr(1);\r\n//       }\r\n//     })\r\n//     .join(' ');\r\n// };\r\n","import React, { useState, useEffect } from 'react';\r\nimport { fetchData } from '../../api';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\nconst Chart = ({\r\n  country,\r\n  data: { total_cases, total_deaths, total_recovered },\r\n  date,\r\n}) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setDailyData(await fetchData(country));\r\n    };\r\n    fetchAPI();\r\n  }, [setDailyData, country]);\r\n\r\n  if (dailyData[0]) {\r\n    var deathPer = Math.round(\r\n        (dailyData[0].total_deaths / dailyData[0].total_cases) * 100\r\n      ),\r\n      dailyDataUpdated = dailyData.filter((e) => {\r\n        return e.last_update.match(`01T`); //|| e.last_update.match(todaysDate);\r\n      }),\r\n      lastUpdate = dailyData[0].last_update;\r\n\r\n    // console.log(dailyData[0].last_update === date);\r\n\r\n    dailyDataUpdated.unshift(dailyData[0]);\r\n    dailyDataUpdated.push(dailyData[dailyData.length - 1]);\r\n  }\r\n\r\n  // console.log(\r\n  //   dailyData.filter((e) => {\r\n  //     return console.log(e);\r\n  //   })\r\n  // );\r\n\r\n  const lineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyDataUpdated.map(({ last_update }) =>\r\n          new Date(last_update).toDateString()\r\n        ),\r\n        datasets: [\r\n          {\r\n            data: dailyDataUpdated.map(\r\n              ({ total_recovered }) => total_recovered\r\n            ),\r\n            label: 'Recovered',\r\n            borderColor: 'green',\r\n            backgroundColor: ' rgba(0, 255, 0, 0.3)',\r\n\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyDataUpdated.map(({ total_deaths }) => total_deaths),\r\n            label: 'Deaths',\r\n            borderColor: 'red',\r\n            backgroundColor: ' rgb(255, 0, 0)',\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyDataUpdated.map(({ total_cases }) => total_cases),\r\n            label: 'Infected',\r\n            borderColor: '#3333ff',\r\n            fill: false,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n  // console.log(data);\r\n  const barChart = lastUpdate ? (\r\n    <Bar\r\n      data={{\r\n        labels: ['Infected', 'Recovered', 'Deaths'],\r\n        datasets: [\r\n          {\r\n            label: 'People',\r\n            backgroundColor: [\r\n              'rgba(0, 0, 255, 0.5)',\r\n              'rgba(0,255, 0,  0.5)',\r\n              'rgba(255,0, 0, 0.5)',\r\n            ],\r\n            data: [total_cases, total_recovered, total_deaths],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: {\r\n          display: false,\r\n          // text: ` Covid-19 Condition in ${country} on ${new Date(\r\n          // date\r\n          // ).toDateString()}.`,\r\n        },\r\n      }}\r\n    />\r\n  ) : null;\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.chartWrapper}>\r\n        <div className={styles.chartAreaWrapper}>\r\n          <h3>\r\n            {` Covid-19 Condition in ${country} on ${new Date(\r\n              date\r\n            ).toDateString()}.`}\r\n          </h3>\r\n          {lastUpdate === date ? lineChart : barChart}{' '}\r\n        </div>\r\n      </div>\r\n\r\n      <div className={styles.card}>\r\n        <h4>\r\n          For every <span className={styles.blue}>100</span> people in the\r\n          community who had gotten infected, approximately\r\n          <span className={styles.red}> {deathPer} </span> ended up dying.\r\n        </h4>\r\n        <h3>\r\n          Made With <span>❤</span> by\r\n          <u>\r\n            <i>\r\n              <a href='https://github.com/01kingmaker01/Covid-Tracker'>\r\n                {' '}\r\n                Ketan Chavan\r\n              </a>\r\n            </i>\r\n          </u>\r\n        </h3>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { NativeSelect, FormControl } from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\nimport { countriesName, fetchData } from '../../api';\r\n\r\nconst CountryPicker = ({\r\n  handleCountry,\r\n  handleDate,\r\n  country,\r\n  dateSelected,\r\n}) => {\r\n  const [fetchedCountries, setFetchedCountries] = useState([]);\r\n  const [date, setDate] = useState();\r\n\r\n  useEffect(() => {\r\n    const fetchCountries = async () => {\r\n      setFetchedCountries(await countriesName());\r\n    };\r\n\r\n    const fetchedData = async () => {\r\n      setDate(await fetchData(country));\r\n    };\r\n\r\n    fetchCountries();\r\n    fetchedData();\r\n  }, [country]);\r\n\r\n  // console.log(date.map(({ last_update }) => ({ date: last_update })));\r\n  if (!date) {\r\n    return 'Loading...';\r\n  }\r\n  let modifiedDate = (dateIN) => {\r\n    const dateArr = dateIN.split(' ');\r\n    return `${dateArr[1]} ${dateArr[2]} ${dateArr[3]}`;\r\n  };\r\n\r\n  const countries = fetchedCountries.map((country, i) => (\r\n      <option className={styles.option} key={i} value={country.alpha2}>\r\n        {country.name}\r\n      </option>\r\n    )),\r\n    dates = date.map(({ last_update }, i) => (\r\n      <option className={styles.option} key={i} value={last_update}>\r\n        {modifiedDate(new Date(last_update).toDateString())}\r\n      </option>\r\n    ));\r\n\r\n  return (\r\n    <div>\r\n      <FormControl variant='filled' className={styles.formControl}>\r\n        <NativeSelect\r\n          className={styles.select}\r\n          value={country}\r\n          onChange={(e) => handleCountry(e.target.value)}\r\n        >\r\n          <option value='Globe' className={styles.option}>\r\n            Globe\r\n          </option>\r\n          {countries}\r\n        </NativeSelect>\r\n      </FormControl>\r\n      <FormControl className={styles.formControl}>\r\n        <NativeSelect\r\n          className={styles.select}\r\n          value={dateSelected}\r\n          onChange={(e) => handleDate(e.target.value)}\r\n        >\r\n          {/* <option value={date[0].last_update} className={styles.option}>\r\n            Total Till Date\r\n          </option> */}\r\n\r\n          {dates}\r\n        </NativeSelect>\r\n      </FormControl>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React, { Component } from 'react';\r\n// import Modal from '@material-ui/core/Modal';\r\nimport { Cards, Chart, CountryPicker } from './components';\r\nimport styles from './App.module.css';\r\nimport { fetchData } from './api';\r\n// import Loader from './Loader';\r\nimport { DotLoader } from 'react-spinners';\r\nimport covid from './image.png';\r\nimport SweetAlert from 'react-bootstrap-sweetalert';\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    cardData: [],\r\n    isLoading: true,\r\n    countrySelected: 'Globe',\r\n    date: [],\r\n    alert: true,\r\n  };\r\n  async componentDidMount() {\r\n    const fetchedData = await fetchData();\r\n    // console.log(fetchedData[0]);\r\n    this.setState({\r\n      cardData: fetchedData[0],\r\n      isLoading: false,\r\n      date: fetchedData[0].last_update,\r\n    });\r\n  }\r\n\r\n  handleCountry = async (country) => {\r\n    const fetchedData = await fetchData(country);\r\n\r\n    this.setState({\r\n      date: fetchedData[0].last_update,\r\n      cardData: fetchedData[0],\r\n      countrySelected: country,\r\n    });\r\n  };\r\n\r\n  handleDate = async (date) => {\r\n    const fetchedData = await fetchData(this.state.countrySelected);\r\n    let dateData = fetchedData.filter((e) => e.last_update === date);\r\n    this.setState({\r\n      cardData: dateData[0],\r\n      date,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    if (this.state.isLoading || !this.state.cardData) {\r\n      return (\r\n        <div className={styles.App}>\r\n          <DotLoader loading />\r\n          <br />\r\n          Fetching Data\r\n        </div>\r\n      );\r\n    }\r\n    const { cardData, countrySelected: country, date } = this.state;\r\n    return (\r\n      <div>\r\n        <div className={styles.container}>\r\n          {this.state.alert ? (\r\n            <SweetAlert\r\n              // btnSize='lg'\r\n              // confirmBtnText='  OK!  '\r\n              confirmBtnStyle={{ padding: '15px 30px', fontSize: '15px' }}\r\n              title='Try Clicking on Infected, Deaths, Recovered button on Graph'\r\n              onConfirm={() => {\r\n                this.setState({ alert: false });\r\n              }}\r\n            >\r\n              <h3\r\n                style={{\r\n                  display: window.innerwidth < 770 ? 'block' : 'none',\r\n                }}\r\n              >\r\n                &lt;-- Slide Graph to LEFT! &lt;--\r\n              </h3>\r\n            </SweetAlert>\r\n          ) : null}\r\n          <img src={covid} className={styles.image} alt='covid' />\r\n\r\n          <Cards data={cardData} country={country} date={date} />\r\n\r\n          <CountryPicker\r\n            handleCountry={this.handleCountry}\r\n            handleDate={this.handleDate}\r\n            country={country}\r\n            dateSelected={date}\r\n          />\r\n        </div>\r\n\r\n        <div className={styles.graphContainer}>\r\n          <Chart date={date} data={cardData} country={country} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2P43U\",\"graphContainer\":\"App_graphContainer__3_WB2\",\"image\":\"App_image__3WIaY\",\"App\":\"App_App__3Vp8N\"};","module.exports = __webpack_public_path__ + \"static/media/image.d7265326.png\";"],"sourceRoot":""}